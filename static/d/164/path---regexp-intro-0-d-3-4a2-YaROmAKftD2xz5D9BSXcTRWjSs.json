{"data":{"markdownRemark":{"html":"<h2>创建正则表达式</h2>\n<ol>\n<li>使用一个正则表达式字面量，其由包含在斜杠之间的模式组成，如下所示：</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/*\n/pattern/flags\n*/</span>\n\n<span class=\"token keyword\">const</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/ab+c/</span>\n\n<span class=\"token keyword\">const</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/^[a-zA-Z]+[0-9]*\\W?_$/gi</span></code></pre></div>\n<p>正则表达式字面值在加载脚本后编译正则表达式。当正则表达式保持不变时，使用此方法可获得更好的性能。</p>\n<ol start=\"2\">\n<li>调用 RegExp 对象的构造函数</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/*\nnew RegExp(pattern [, flags])\n*/</span>\n\n<span class=\"token keyword\">let</span> regex <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ab+c'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> regex <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/^[a-zA-Z]+[0-9]*\\W?_$/</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'gi'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> regex <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'^[a-zA-Z]+[0-9]*\\\\W?_$'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'gi'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>使用构造函数提供的正则表达式在运行时编译。当正则表达式的模式将会改变，或者模式未知，需要用户输入时，可以使用这种方法。</p>\n<h2>正则表达式相关的对象和方法</h2>\n<h3>RegExp 对象属性</h3>\n<p>与修饰符相关的属性</p>\n<ul>\n<li>global :返回一个布尔值，表示是否设置了 g 修饰符，该属性只读。</li>\n<li>ignoreCase :返回一个布尔值，表示是否设置了 i 修饰符，该属性只读。</li>\n<li>multiline :返回一个布尔值，表示是否设置了 m 修饰符，该属性只读。</li>\n<li>sticky :返回一个布尔值，表示是否设置了 y 修饰符，该属性只读。</li>\n<li>unicode :返回一个布尔值，表示是否设置了 u 修饰符，该属性只读。</li>\n<li>flags :返回正则表达式的修饰符。</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> r <span class=\"token operator\">=</span> <span class=\"token regex\">/abc/gim</span>\n\nr<span class=\"token punctuation\">.</span>ignoreCase <span class=\"token comment\">// true</span>\nr<span class=\"token punctuation\">.</span>global <span class=\"token comment\">// true</span>\nr<span class=\"token punctuation\">.</span>multiline <span class=\"token comment\">// true</span></code></pre></div>\n<p>与修饰符无关的属性</p>\n<ul>\n<li>lastIndex :返回下一次开始搜索的位置。该属性可读写，但是只在设置了 g 修饰符时有意义。</li>\n<li>source :返回正则表达式的字符串形式（不包括反斜杠），该属性只读。</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> r <span class=\"token operator\">=</span> <span class=\"token regex\">/abc/gim</span>\n\nr<span class=\"token punctuation\">.</span>lastIndex <span class=\"token comment\">// 0</span>\nr<span class=\"token punctuation\">.</span>source <span class=\"token comment\">// \"abc\"</span></code></pre></div>\n<h3>RegExp 对象方法</h3>\n<h4>exec</h4>\n<p>如果发现匹配，就返回一个数组，成员是每一个匹配成功的子字符串，否则返回 null</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> r <span class=\"token operator\">=</span> <span class=\"token regex\">/a(b+)a/g</span>\n\n<span class=\"token keyword\">var</span> a1 <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'_abbba_aba_'</span><span class=\"token punctuation\">)</span>\na1 <span class=\"token comment\">// ['abbba', 'bbb']</span>\na1<span class=\"token punctuation\">.</span>index <span class=\"token comment\">// 1</span>\nr<span class=\"token punctuation\">.</span>lastIndex <span class=\"token comment\">// 6</span>\n\n<span class=\"token keyword\">var</span> a2 <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'_abbba_aba_'</span><span class=\"token punctuation\">)</span>\na2 <span class=\"token comment\">// ['aba', 'b']</span>\na2<span class=\"token punctuation\">.</span>index <span class=\"token comment\">// 7</span>\nr<span class=\"token punctuation\">.</span>lastIndex <span class=\"token comment\">// 10</span>\n\n<span class=\"token keyword\">var</span> a3 <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'_abbba_aba_'</span><span class=\"token punctuation\">)</span>\na3 <span class=\"token comment\">// null</span>\na3<span class=\"token punctuation\">.</span>index <span class=\"token comment\">// TypeError: Cannot read property 'index' of null</span>\nr<span class=\"token punctuation\">.</span>lastIndex <span class=\"token comment\">// 0</span>\n\n<span class=\"token keyword\">var</span> a4 <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'_abbba_aba_'</span><span class=\"token punctuation\">)</span>\na4 <span class=\"token comment\">// ['abbba', 'bbb']</span>\na4<span class=\"token punctuation\">.</span>index <span class=\"token comment\">// 1</span>\nr<span class=\"token punctuation\">.</span>lastIndex <span class=\"token comment\">// 6</span></code></pre></div>\n<h4>test</h4>\n<p>test 返回一个布尔值，表示当前模式是否能匹配参数字符串。如果正则表达式带有 g 修饰符，则每一次 test 方法都从上一次结束的位置开始向后匹配。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> r <span class=\"token operator\">=</span> <span class=\"token regex\">/x/g</span>\n<span class=\"token keyword\">var</span> s <span class=\"token operator\">=</span> <span class=\"token string\">'_x_x'</span>\n\nr<span class=\"token punctuation\">.</span>lastIndex <span class=\"token comment\">// 0</span>\nr<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n\nr<span class=\"token punctuation\">.</span>lastIndex <span class=\"token comment\">// 2</span>\nr<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n\nr<span class=\"token punctuation\">.</span>lastIndex <span class=\"token comment\">// 4</span>\nr<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span></code></pre></div>\n<p>如果正则模式是一个空字符串，则匹配所有字符串。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// true</span></code></pre></div>\n<h3>String 对象方法</h3>\n<h4>match</h4>\n<p>匹配成功返回一个数组，匹配失败返回 null。如果正则表达式带有 g 修饰符，则该方法与正则对象的 exec 方法行为不同，会一次性返回所有匹配成功的结果。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> s <span class=\"token operator\">=</span> <span class=\"token string\">'abba'</span>\n<span class=\"token keyword\">var</span> r <span class=\"token operator\">=</span> <span class=\"token regex\">/a/g</span>\n\ns<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"a\", \"a\"]</span>\nr<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"a\"]</span></code></pre></div>\n<h4>search</h4>\n<p>返回第一个满足条件的匹配结果在整个字符串中的位置。如果没有任何匹配，则返回-1。该方法会忽略 g 修饰符。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> r <span class=\"token operator\">=</span> <span class=\"token regex\">/x/g</span>\nr<span class=\"token punctuation\">.</span>lastIndex <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token comment\">// 无效</span>\n<span class=\"token string\">'_x_x'</span><span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span></code></pre></div>\n<h4>replace</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">str<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>search<span class=\"token punctuation\">,</span> replacement<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'  #id div.class  '</span>\n\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/^\\s+|\\s+$/g</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// \"#id div.class\"</span></code></pre></div>\n<p>replace 方法的第二个参数可以使用美元符号$，用来指代所替换的内容。</p>\n<blockquote>\n<ul>\n<li>$&#x26; 指代匹配的子字符串。</li>\n<li>$` 指代匹配结果前面的文本。</li>\n<li>$' 指代匹配结果后面的文本。</li>\n<li>$n 指代匹配成功的第 n 组内容，n 是从 1 开始的自然数。</li>\n<li>$$ 指代美元符号$。</li>\n</ul>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">'abc'</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"[$`-$&amp;-$']\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// \"a[a-b-c]c\"</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> prices <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  pr_1<span class=\"token punctuation\">:</span> <span class=\"token string\">'$1.99'</span><span class=\"token punctuation\">,</span>\n  pr_2<span class=\"token punctuation\">:</span> <span class=\"token string\">'$9.99'</span><span class=\"token punctuation\">,</span>\n  pr_3<span class=\"token punctuation\">:</span> <span class=\"token string\">'$5.00'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> template <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;span id=\"pr_1\">&lt;/span>'</span> <span class=\"token comment\">// 这里可以放网页模块字符串</span>\n\ntemplate<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/(&lt;span id=\")(.*?)(\">)(&lt;\\/span>)/g</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>match<span class=\"token punctuation\">,</span> $<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> $<span class=\"token number\">2</span><span class=\"token punctuation\">,</span> $<span class=\"token number\">3</span><span class=\"token punctuation\">,</span> $<span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> $<span class=\"token number\">1</span> <span class=\"token operator\">+</span> $<span class=\"token number\">2</span> <span class=\"token operator\">+</span> $<span class=\"token number\">3</span> <span class=\"token operator\">+</span> prices<span class=\"token punctuation\">[</span>$<span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> $<span class=\"token number\">4</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//\"&lt;span id=\"pr_1\">$1.99&lt;/span>\"</span></code></pre></div>\n<ul>\n<li>split :返回一个由分割后的各个部分组成的数组。</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">str<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span>separator<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>limit<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 非正则分隔</span>\n<span class=\"token string\">'a,  b,c, d'</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// [ 'a', '  b', 'c', ' d' ]</span>\n\n<span class=\"token comment\">// 正则分隔，去除多余的空格</span>\n<span class=\"token string\">'a,  b,c, d'</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/, */</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// [ 'a', 'b', 'c', 'd' ]</span></code></pre></div>\n<p>如果正则表达式带有括号，则括号匹配的部分也会作为数组成员返回。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">'aaa*a*'</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/(a*)/</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// [ '', 'aaa', '*', 'a', '*' ]</span></code></pre></div>\n<h2>修饰符 flags</h2>\n<ul>\n<li>g: 全局搜索,如果正则表达式带有 g 修饰符，则每一次 test 方法都从上一次结束的位置开始向后匹配</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> r <span class=\"token operator\">=</span> <span class=\"token regex\">/x/g</span>\n<span class=\"token keyword\">var</span> s <span class=\"token operator\">=</span> <span class=\"token string\">'_x_x'</span>\n\nr<span class=\"token punctuation\">.</span>lastIndex <span class=\"token comment\">// 0</span>\nr<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n\nr<span class=\"token punctuation\">.</span>lastIndex <span class=\"token comment\">// 2</span>\nr<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n\nr<span class=\"token punctuation\">.</span>lastIndex <span class=\"token comment\">// 4</span>\nr<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span></code></pre></div>\n<ul>\n<li>i：不区分大小写</li>\n<li>m：多行搜索</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> s <span class=\"token operator\">=</span> <span class=\"token string\">'abc\\nabc\\ndab'</span>\n<span class=\"token keyword\">var</span> r1 <span class=\"token operator\">=</span> <span class=\"token regex\">/^ab/gm</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>r1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token comment\">//2</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'first second\\nthird fourth\\nfifth sixth'</span>\n<span class=\"token keyword\">var</span> r1 <span class=\"token operator\">=</span> <span class=\"token regex\">/(\\w+)$/gm</span>\n<span class=\"token keyword\">var</span> r2 <span class=\"token operator\">=</span> <span class=\"token regex\">/(\\w+)$/g</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>r1<span class=\"token punctuation\">)</span> <span class=\"token comment\">//[\"second\", \"fourth\", \"sixth\"]</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>r2<span class=\"token punctuation\">)</span> <span class=\"token comment\">//[\"sixth\"]</span></code></pre></div>\n<ul>\n<li>u：Unicode 模式，会正确处理大于\\uFFFF 的字符</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 正确返回字符串长度的函数</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">codePointLength</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> text<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/[\\s\\S]/gu</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> result <span class=\"token operator\">?</span> result<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> s <span class=\"token operator\">=</span> <span class=\"token string\">'𠮷𠮷'</span>\n\ns<span class=\"token punctuation\">.</span>length <span class=\"token comment\">// 4</span>\n<span class=\"token function\">codePointLength</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span></code></pre></div>\n<ul>\n<li>y：粘连模式</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> s <span class=\"token operator\">=</span> <span class=\"token string\">'aaa_aa_a'</span>\n<span class=\"token keyword\">var</span> r1 <span class=\"token operator\">=</span> <span class=\"token regex\">/a+/g</span>\n<span class=\"token keyword\">var</span> r2 <span class=\"token operator\">=</span> <span class=\"token regex\">/a+/y</span>\n\nr1<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"aaa\"]</span>\nr2<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"aaa\"]</span>\n\nr1<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"aa\"]</span>\nr2<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token comment\">// null</span></code></pre></div>\n<h2>正则表达式模式 pattern</h2>\n<p>pattern 包括简单字符和特殊字符。</p>\n<p>特殊字符有以下几类：</p>\n<ul>\n<li>字符类</li>\n<li>字符集</li>\n<li>边界</li>\n<li>交替</li>\n<li>群组和反向引用</li>\n<li>量词</li>\n<li>断言</li>\n</ul>\n<p>具体如下：</p>\n<h3>字符类</h3>\n<ul>\n<li>. ：除\\n, \\r, \\u2028 or \\u2029 外的任何单个字符</li>\n<li>\\d :任何数字，[0-9]</li>\n<li>\\D :非数字，<sup id=\"fnref-0-9\"><a href=\"#fn-0-9\" class=\"footnote-ref\">0-9</a></sup></li>\n<li>\\w :字母数字下划线，[A-Za-z0-9_]</li>\n<li>\\W :非字母数字下划线，<sup id=\"fnref-a-za-z0-9_\"><a href=\"#fn-a-za-z0-9_\" class=\"footnote-ref\">a-za-z0-9_</a></sup></li>\n<li>\\s :单个空格字符，[ \\f\\n\\r\\t\\v\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]</li>\n<li>\\S :单个非空格字符，<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup></li>\n<li>\\t :horizontal tab 匹配一个水平制表符 (U+0009)</li>\n<li>\\v :vertical tab 匹配一个垂直制表符 (U+000B)</li>\n<li>\\r :return 匹配一个回车符 (U+000D)</li>\n<li>\\n :linefeed 匹配一个换行符 (U+000A)</li>\n<li>\\f :form-feed 换页符 (U+000C)</li>\n<li>[\\b] :backspace</li>\n<li>\\0 : 匹配 null 字符（U+0000）</li>\n<li>\\uhhhh :值为 hhhh 的 UTF-16 字符</li>\n<li>\\u{hhhh},\\u{hhhhhh} :修饰符有 u 时，代表 unicode 字符</li>\n<li>\\cX :表示 Ctrl-[X]，其中的 X 是 A-Z 之中任一个英文字母，用来匹配控制字符。</li>\n</ul>\n<h3>字符集</h3>\n<ul>\n<li>[xyz],[a-c]</li>\n<li><sup id=\"fnref-xyz\"><a href=\"#fn-xyz\" class=\"footnote-ref\">xyz</a></sup>,<sup id=\"fnref-a-c\"><a href=\"#fn-a-c\" class=\"footnote-ref\">a-c</a></sup></li>\n<li>^ :脱字符。[^]匹配一切字符。</li>\n<li>- :连字符。表示字符的连续范围。</li>\n</ul>\n<h3>边界</h3>\n<ul>\n<li>^ :开始</li>\n<li>$ :结束</li>\n<li>\\b :单词边界</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token regex\">/\\bm/</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'moon'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'm'</span>\n<span class=\"token operator\">/</span>oo\\b<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'moon'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\n<span class=\"token operator\">/</span>oon\\b<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'moon'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p>\\B :非单词边界</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// \\s的例子</span>\n<span class=\"token operator\">/</span>\\s\\w<span class=\"token operator\">*</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello world'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\" world\"]</span>\n\n<span class=\"token comment\">// \\b的例子</span>\n<span class=\"token operator\">/</span>\\bworld<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello world'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n<span class=\"token operator\">/</span>\\bworld<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello-world'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n<span class=\"token operator\">/</span>\\bworld<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello_world'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\n<span class=\"token operator\">/</span>\\bworld<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'helloworld'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\n\n<span class=\"token comment\">// \\B的例子</span>\n<span class=\"token operator\">/</span>\\Bworld<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello-world'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\n<span class=\"token operator\">/</span>\\Bworld<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'helloworld'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></code></pre></div>\n<h3>候选</h3>\n<ul>\n<li>x|y :x 或者 y</li>\n</ul>\n<h3>群组和反向引用</h3>\n<ul>\n<li>(x) :匹配并记住 x</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> re <span class=\"token operator\">=</span> <span class=\"token regex\">/(\\w+)\\s(\\w+)/</span>\n<span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'John Smith'</span>\n<span class=\"token keyword\">var</span> newstr <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">,</span> <span class=\"token string\">'$2, $1'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//$n 引用括号匹配字符串</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>newstr<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Smith, John</span></code></pre></div>\n<ul>\n<li>\n<p>\\n :反向引用</p>\n</li>\n<li>\n<p>(?:x) :匹配且不记住 x</p>\n</li>\n</ul>\n<h3>量词</h3>\n<ul>\n<li>x* : 匹配 x 0 次或多次</li>\n<li>x+ : 匹配 x 1 次或多次</li>\n<li>x? :0 or 1</li>\n<li>x{n} : n 次</li>\n<li>x{n,} :至少 n 次</li>\n<li>x{n,m} :至少 n 次，至多 m 次</li>\n<li>x*? :非贪婪模式</li>\n</ul>\n<h3>断言</h3>\n<ul>\n<li>x(?=y) :先行断言。只有 y 跟随 x 时才匹配 x</li>\n<li>x(?!y) :先行否定断言。只有 y 不跟随 x 时才匹配 x</li>\n</ul>\n<h3>贪婪模式</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> s <span class=\"token operator\">=</span> <span class=\"token string\">'aaa'</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/a+/</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"aaa\"]</span></code></pre></div>\n<p>如果想将贪婪模式改为非贪婪模式，可以在量词符后面加一个问号。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> s <span class=\"token operator\">=</span> <span class=\"token string\">'aaa'</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/a+?/</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"a\"]</span></code></pre></div>\n<h3>组匹配</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">;</span><span class=\"token regex\">/fred+/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fredd'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token comment\">// true</span>\n  fred <span class=\"token operator\">+</span>\n  <span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fredfred'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token operator\">/</span> <span class=\"token boolean\">true</span></code></pre></div>\n<p>在正则表达式内部，可以用\\n 引用括号匹配的内容，n 是从 1 开始的自然数，表示对应顺序的括号。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">;</span><span class=\"token regex\">/(.)b(.)\\1b\\2/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abcabc'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// true</span></code></pre></div>\n<p>组匹配非常有用，下面是一个匹配网页标签的例子。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> tagName <span class=\"token operator\">=</span> <span class=\"token regex\">/&lt;([^>]+)>[^&lt;]*&lt;\\/\\1>/</span>\ntagName<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;b>bold&lt;/b>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">// 'b'</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> html <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;b class=\"hello\">Hello&lt;/b>&lt;i>world&lt;/i>'</span>\n<span class=\"token keyword\">var</span> tag <span class=\"token operator\">=</span> <span class=\"token regex\">/&lt;(\\w+)([^>]*)>(.*?)&lt;\\/\\1>/g</span>\n\n<span class=\"token keyword\">var</span> match <span class=\"token operator\">=</span> tag<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">)</span>\n\nmatch<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// \"b\"</span>\nmatch<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// \" class=\"hello\"\"</span>\nmatch<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// \"Hello\"</span>\n\nmatch <span class=\"token operator\">=</span> tag<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">)</span>\n\nmatch<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// \"i\"</span>\nmatch<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// \"\"</span>\nmatch<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// \"world\"</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 获取url信息</span>\n<span class=\"token keyword\">var</span> url <span class=\"token operator\">=</span> <span class=\"token regex\">/(http|ftp):\\/\\/([^/\\r\\n]+)(\\/[^\\r\\n]*)?/</span>\n\nurl<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://javascript.ruanyifeng.com/stdlib/regexp.html'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//  [\"http://javascript.ruanyifeng.com/stdlib/regexp.html\", \"http\", \"javascript.ruanyifeng.com\", \"/stdlib/regexp.html\"]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 获取url参数值</span>\n<span class=\"token keyword\">var</span> url <span class=\"token operator\">=</span> <span class=\"token string\">'/rtcp-web/libra/mw/list.do?sysSimpleName=rtcp&amp;_=1500608993777'</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> reg <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'(?:^|\\\\?|&amp;)'</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">'=([^&amp;]*)(?:&amp;|#|$)'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'gi'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">var</span> match <span class=\"token operator\">=</span> reg<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>match<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> match<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token string\">'sysSimpleName'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// rtcp</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// get all url parameter</span>\n\n<span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token string\">'/rtcp-web/libra/mw/list.do?sysSimpleName=rtcp&amp;_=1500608993777'</span>\n\n<span class=\"token keyword\">const</span> reg <span class=\"token operator\">=</span> <span class=\"token regex\">/(\\?|\\&amp;)([^=]+)\\=([^&amp;]+)/g</span>\n\n<span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// [\"?sysSimpleName=rtcp\", \"&amp;_=1500608993777\"]</span></code></pre></div>\n<p>template example</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> template<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/\\{\\{(.*?)\\}\\}/g</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>match<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> context<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> template <span class=\"token operator\">=</span> <span class=\"token string\">'{{name}}很厉害的name正则，{{age }}ff'</span>\n\n<span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'xiaoming'</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token string\">'12'</span> <span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>非捕获组</h3>\n<p>(?:x)称为非捕获组（Non-capturing group），表示不返回该组匹配的内容</p>\n<h3>其他</h3>\n<p>后行断言、具名组匹配等，目前处于提案阶段。</p>\n<h2>参考资料</h2>\n<ul>\n<li>\n<p><a href=\"http://javascript.ruanyifeng.com/stdlib/regexp.html\">http://javascript.ruanyifeng.com/stdlib/regexp.html</a></p>\n</li>\n<li>\n<p><a href=\"http://es6.ruanyifeng.com/#docs/regex\">http://es6.ruanyifeng.com/#docs/regex</a></p>\n</li>\n<li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp</a></p>\n</li>\n<li>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions</a></p>\n</li>\n<li>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp</a></p>\n</li>\n<li>\n<p><a href=\"http://www.cnblogs.com/rubylouvre/archive/2010/03/09/1681222.html\">http://www.cnblogs.com/rubylouvre/archive/2010/03/09/1681222.html</a></p>\n</li>\n</ul>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p> \\f\\n\\r\\t\\v\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","frontmatter":{"title":"正则表达式用法"}}},"pageContext":{"slug":"/regexp-intro/"}}